@page "/OrderQuery"
@rendermode InteractiveServer
@inject IJSRuntime JS
@using System.Linq
@using Microsoft.EntityFrameworkCore
@namespace bookSystemBlazor

<PageTitle>查询订单</PageTitle>
<h3>查询订单</h3>
<p><i>已连接到数据库:@db.DBpath</i></p>

<h4>查找订单</h4>
<input type="text" placeholder="客户姓名" @bind="searchCustomName" />
<input type="number" placeholder="订单ID" @bind="searchOrderId" />
<button class="btn btn-primary" @onclick="SearchOrder">查找</button>

@if (orderList.Any())
{
    <h5>查找到的订单</h5>
    <table class="table">
        <thead>
            <tr>
                <th>订单ID</th>
                <th>客户姓名</th>
                <th>客户是否拿书</th>
                <th>订单总价</th>
                <th>操作</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orderList)
            {
                <tr>
                    <td>@order.ID</td>
                    <td>@order.CustomName</td>
                    <td><input type="checkbox" @bind="order.IsTakes" /></td>
                    <td>@CalculateOrderTotal(order)</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => LoadOrderDetails(order.ID)">查看详情</button>
                        <button class="btn btn-danger" @onclick="() => DeleteOrder(order)">删除订单</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedOrder != null)
{
    <h5>订单详情</h5>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>客户姓名</th>
                    <th>客户是否拿药</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@selectedOrder.CustomName</td>
                    <td><input type="checkbox" @bind="selectedOrder.IsTakes" /></td>
                    <td><button class="btn btn-primary" @onclick="UpdateOrder">更新拿药信息</button></td>
                </tr>
            </tbody>
        </table>
    </div>

    <h6>订单图书列表</h6>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>图书ID</th>
                    <th>图书名称</th>
                    <th>图书单价</th>
                    <th>图书库存</th>
                    <th>订购数量</th>
                    <th>总价</th>
                    <th>操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in selectedOrder.Books.Select((value, index) => new { value, index }))
                {
                    <tr>
                        <td>@book.value.BookID</td>
                        <td>@book.value.Book.Name</td>
                        <td>@book.value.Book.Price</td>
                        <td>@book.value.Book.Quantity</td>
                        <td>
                            <input type="number" min="1" max="@book.value.Book.Quantity + book.value.Quantity" value="@book.value.Quantity" @onchange="(e) => UpdateBookQuantity(book.index, int.Parse(e.Value.ToString()))" />
                        </td>
                        <td>@CalculateBookTotal(book.value)</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => RemoveBookFromOrder(book.index)">删除</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <h6>添加图书</h6>
    <div>
        <select class="form-select" @bind="selectedBookId">
            <option value="">选择图书</option>
            @foreach (var book in availableBooks)
            {
                <option value="@book.ID">@book.Name</option>
            }
        </select>
        <input type="number" min="1" @bind="newBookQuantity" placeholder="数量" />
        <button class="btn btn-primary" @onclick="AddBookToOrder">添加图书</button>
    </div>
}

@code {
    private DSDBcontext db = new(); // 连接到数据库
    private string searchCustomName = string.Empty;
    private int searchOrderId;
    private List<Order> orderList = new();
    private Order selectedOrder;
    private List<Book> availableBooks = new();
    private int selectedBookId;
    private int newBookQuantity;

    private void SearchOrder()
    {
        if (!string.IsNullOrWhiteSpace(searchCustomName))
        {
            orderList = db.Orders
                .Include(p => p.Books)
                .ThenInclude(pd => pd.Book)
                .Where(p => p.CustomName.Contains(searchCustomName))
                .ToList();
        }
        else if (searchOrderId > 0)
        {
            orderList = db.Orders
                .Include(p => p.Books)
                .ThenInclude(pd => pd.Book)
                .Where(p => p.ID == searchOrderId)
                .ToList();
        }
    }

    private void LoadOrderDetails(int orderId)
    {
        selectedOrder = db.Orders
            .Include(p => p.Books)
            .ThenInclude(pd => pd.Book)
            .FirstOrDefault(p => p.ID == orderId);

        LoadAvailableBooks(); // 加载可用图书列表
    }

    private void UpdateOrder()
    {
        db.SaveChanges();
        JS.InvokeVoidAsync("alert", "订单已更新");
    }

    private void UpdateBookQuantity(int index, int newQuantity)
    {
        var bookDetail = selectedOrder.Books[index];
        var book = db.Books.Find(bookDetail.BookID);

        if (book != null)
        {
            int originalQuantity = bookDetail.Quantity;
            int quantityDifference = newQuantity - originalQuantity;

            if (book.Quantity + originalQuantity >= newQuantity)
            {
                book.Quantity -= quantityDifference;
                bookDetail.Quantity = newQuantity;
                db.SaveChanges();
            }
            else
            {
                JS.InvokeVoidAsync("alert", "图书库存不足");
            }
        }
    }

    private void RemoveBookFromOrder(int index)
    {
        var bookDetail = selectedOrder.Books[index];
        var book = db.Books.Find(bookDetail.BookID);

        if (book != null)
        {
            book.Quantity += bookDetail.Quantity; // 恢复库存
        }

        selectedOrder.Books.RemoveAt(index);
        db.SaveChanges();
        JS.InvokeVoidAsync("alert", "图书已从处方中移除");
    }

    private void DeleteOrder(Order order)
    {
        db.Orders.Remove(order);
        db.SaveChanges();
        orderList.Remove(order);
        JS.InvokeVoidAsync("alert", "订单已删除");
    }

    private void LoadAvailableBooks()
    {
        availableBooks = db.Books.ToList();
    }

    private void AddBookToOrder()
    {
        var bookToAdd = db.Books.Find(selectedBookId);

        if (bookToAdd != null && newBookQuantity > 0)
        {
            if (selectedOrder.Books.Any(d => d.BookID == bookToAdd.ID))
            {
                var existingBook = selectedOrder.Books.First(d => d.BookID == bookToAdd.ID);
                existingBook.Quantity += newBookQuantity;
            }
            else
            {
                var newOrderBook = new OrderBooks
                    {
                        BookID = bookToAdd.ID,
                        Book = bookToAdd,
                        Quantity = newBookQuantity
                    };
                selectedOrder.Books.Add(newOrderBook);
            }

            db.SaveChanges();
            JS.InvokeVoidAsync("alert", "图书已添加到订单");
        }
        else
        {
            JS.InvokeVoidAsync("alert", "请选择图书并输入有效数量");
        }
    }

    private float CalculateOrderTotal(Order order)
    {
        if (order.Books != null && order.Books.Any())
        {
            float? sum = order.Books.Sum(d => d.Book?.Price * d.Quantity);
            return sum.GetValueOrDefault();
        }
        return 0;
    }

    private float CalculateBookTotal(OrderBooks book)
    {
        if (book != null && book.Book != null)
        {
            float? sum = book.Book.Price * book.Quantity;
            return sum.GetValueOrDefault();
        }
        return 0;
    }

    protected override void OnInitialized()
    {
        db.Database.EnsureCreated(); // 确保数据库已创建
        orderList = db.Orders.OrderBy(p => p.ID).ToList();
    }
}
